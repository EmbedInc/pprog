;   ****************************************************************
;   * Copyright (C) 2008, Embed Inc (http://www.embedinc.com).     *
;   * All rights reserved except as explicitly noted here.         *
;   *                                                              *
;   * Permission to copy this file is granted as long as this      *
;   * copyright notice is included in its entirety at the          *
;   * beginning of the file, whether the file is copied in whole   *
;   * or in part and regardless of whether other information is    *
;   * added to the copy, and one of the following conditions is    *
;   * met:                                                         *
;   *                                                              *
;   *   1 - Any executable derived from the this file is only run  *
;   *       on a Embed Inc product.                                *
;   *                                                              *
;   *   2 - Any device that contains executable code derived from  *
;   *       this file is not sold, not distributed for commercial  *
;   *       advantage, and not more than 10 (ten) instances of the *
;   *       device are created.                                    *
;   *                                                              *
;   * To copy this file otherwise requires explicit permission     *
;   * from Embed Inc and may also require a fee.                   *
;   *                                                              *
;   * The information in this file is provided "as is".  Embed Inc *
;   * makes no claims of suitability for any particular purpose    *
;   * nor assumes any liability resulting from its use.            *
;   ****************************************************************
;
;   Include file that implements the common parts of the F16E module within
;   various PIC programmer firmware types.  This module handles the enhanced 16F
;   target PICs, which generally seem to have 4 digit module numbers.  These
;   have a somewhat different memory architecture than the original PIC 16.
;
;   The program memory address space seems to be (addresses in HEX):
;
;     0000 - 7FFF   Program memory
;     8000 - FFFF   Configration space
;
         extern  done_read   ;jump here when specific read routine done
         extern  done_write  ;jump here when specific write routine done

         extern  tadr        ;requested target chip address of operation
         extern  tadri       ;actual internal target chip address
         extern  nextwait    ;length of wait to set up on call to WAIT_START
         extern  wbufsz      ;target chip write buffer size
         extern  wbufen      ;last address covered by write buffer
         extern  datadr      ;target address for start of data EEPROM
         extern_flags        ;declare global flag bits EXTERN

;*******************************************************************************
;
;   Configuration constants.
;
/const   iprogms real = 5    ;ms to wait for internally timed program to complete
/const   endms   real = 0.100 ;ms to wait after explicit END PROGRAM command

;*******************************************************************************
;
;   Local state.
;
         defram  lbankadr

cmd_prog res     1           ;opcode to start programming
cmd_end  res     1           ;opcode to end programming, when FLAG_OP1 set


.f16e    code
;*******************************************************************************
;
;   Local subroutine SET_ADR
;
;   Set the internal target chip address to match the desired address.  The
;   desired address is in TADR and the current address internal to the target
;   chip is TADRI.  These parts implement a 16 bit address space, so only the
;   low 2 bytes of TADR and TADRI are used.  Any remaining higher address bytes
;   should be set to 0, but are ignored by this routine.
;
;   This version uses the commands:
;
;     RESET ADDRESS (22)
;     LOAD CONFIGURATION (0)
;     INCREMENT ADDRESS (6)
;
         locsub  set_adr, regf0 | regf1
;
;   Check for reasons to reset the address to 0.
;
         ;
         ;   Check for target address is unknown.
         ;
         dbankif gbankadr
         btfss   flag_tadrkn ;the target address is known ?
         jump    sa_reset    ;no, go reset it to a known state
         ;
         ;   Check for target address is past the desired address.  The address
         ;   can only be incremented, not decremented.  The only way to decrease
         ;   the address is to reset it to 0.
         ;
         dbankif gbankadr
         movf    tadri+1, w  ;get current address high byte
         subwf   tadr+1, w   ;compare to desired address high byte
         skip_wle            ;high byte at or before desired address ?
         jump    sa_reset    ;definitely past desired address, do the reset
         skip_z              ;high byte compare inconclusive ?
         jump    sa_dreset   ;definitely before desired address, skip the reset

         movf    tadri+0, w  ;get current address low byte
         subwf   tadr+0, w   ;compare to desired address low byte
         skip_wgt            ;past desired address, need to do reset ?
         jump    sa_dreset   ;no, skip the reset
;
;   Reset the target chip address to 0.  This is done by issuing the RESET
;   ADDRESS command.
;
sa_reset dbankis gbankadr
         loadk16 tadri, 0    ;set our copy of the target chip address
         bsf     flag_tadrkn ;the target chip address is known and in TADRI

         loadk8  reg0, 22    ;send RESET ADDRESS command
         gcall   sert_send6
         dbankif gbankadr

sa_dreset dbankis gbankadr   ;skip here to avoid doing a reset
;
;   The current target chip address is known, and is less than or equal to
;   the desired address.
;
;   Now check for the current address is in program memory and the desired
;   address in configuration memory.  The program counter can't be incremented
;   from program memory to configuration memory.  Configuration memory can only
;   be entered with a LOAD CONFIGURATION command.
;
         dbankif gbankadr
         btfss   tadr+1, 7   ;desired address is in config space ?
         jump    sa_dconfig  ;no
         btfsc   tadri+1, 7  ;current address is in program memory space ?
         jump    sa_dconfig  ;no
         ;
         ;   Switch to configuration space.
         ;
         dbankif gbankadr
         loadk16 tadri, h'8000' ;update local copy of target chip address

         loadk8  reg0, 0     ;send LOAD CONFIGURATION opcode
         gcall   sert_send6
         loadk16 reg0, 0     ;send 0 data word with the command
         gcall   sert_send14ss

sa_dconfig unbank            ;skip to here to avoid switching to config adr range
;
;   The current address is less than or equal to the desired address, and is in
;   the same address space.
;
;   Now increment the current address until it matches the desired address.
;
sa_loopinc unbank            ;back here after each address increment
         dbankif gbankadr
         movf    tadri+0, w  ;get current address low byte
         xorwf   tadr+0, w   ;compare to desired address low byte
         movwf   reg0        ;save result of low byte compare
         movf    tadri+1, w  ;get current address high byte
         xorwf   tadr+1, w   ;compare to desired address high byte
         iorwf   reg0, w     ;merge with mismatch from low bytes
         skip_nz             ;not currently at desired address ?
         jump    sa_doneinc  ;current address = desired address, all done
         ;
         ;   The current and desired addresses don't match.  Increment
         ;   the current address.
         ;
sa_doinc
         loadk8  reg0, 6     ;send INCREMENT ADDRESS command
         gcall   sert_send6
         gcall   op_inc_tadri ;update our copy of the target chip current address
         jump    sa_loopinc  ;back to compare addresses after the increment

sa_doneinc unbank            ;done incrementing current address to match desired

         leaverest

;*******************************************************************************
;
;   Local subroutine SET_ADR183
;
;   Set the internal target chip address to match the desired address.  The
;   desired address is in TADR and the current address internal to the target
;   chip is TADRI.  These parts implement a 16 bit address space, so only the
;   low 2 bytes of TADR and TADRI are used.  Any remaining higher address bytes
;   should be set to 0, but are ignored by this routine.
;
;   This version is for the 16F183xx and probably others.  It uses the commands:
;
;     LOAD PC ADDRESS (29)
;     INCREMENT ADDRESS (6)
;
         locsub  set_adr183, regf0 | regf1 | regf2
;
;   Get the actual target address corresponding to the desired address into
;   REG1:REG0.  When in data space, the target address is offset by DATADR.
;
         dbankif gbankadr
         movf    tadr+1, w   ;get app address high byte
         movwf   reg1
         movf    tadr+0, w   ;get app address low byte
         movwf   reg0

         skip_flag spdata    ;in data space ?
         jump    sa183_prog  ;no, skip this section
         movf    datadr+0, w ;get offset low byte
         addwf   reg0        ;add it
         movf    datadr+1, w ;get offset high byte
         addwfc  reg1        ;add it
sa183_prog
;
;   Check for the target address is unknown.
;
         skip_flag tadrkn    ;target address is known ?
         jump    sa183_set   ;no, go explicitly set it
;
;   Check for the target address is already set as desired.  The desired target
;   address is in REG1:REG0.
;
         dbankif gbankadr
         movf    tadri+0, w  ;get current address low byte
         xorwf   reg0, w     ;compare to desired address low byte
         movwf   reg2        ;save result of low byte compare
         movf    tadri+1, w  ;get current address high byte
         xorwf   reg1, w     ;compare to desired address high byte
         iorwf   reg2, w     ;merge with mismatch from low bytes
         bz      sa183_leave ;address is already set, nothing more to do
;
;   Just increment the address instead of loading it explicitly if all the
;   restrictions for that are met.  The desired address is in REG1:REG0 and the
;   current target address in TADRI.
;
         dbankif gbankadr
         ;
         ;   Abort if the current and desired addresses are in different
         ;   half-spaces.  Since the address space is 16 bits, that means the
         ;   high bit of both addresses must be the same.
         ;
         movf    tadri+1, w
         xorwf   reg1, w     ;compare both high address bytes
         andlw   h'80'       ;mask in the half-space address bit
         bnz     sa183_set   ;in different hals-spaces, go set adr explicitly ?
         ;
         ;   Abort if the desired address is not 1 plus the current address.
         ;
         incf    tadri+0, w  ;make curr adr + 1 low byte
         movwf   reg2        ;temp save it
         movlw   0
         addwfc  tadri+1, w  ;make curr adr + 1 high byte
         xorwf   reg1, w     ;compare high bytes
         bnz     sa183_set   ;high bytes mismatch, go set adr explicitly ?
         movf    reg2, w
         xorwf   reg0, w     ;compare low bytes
         bnz     sa183_set   ;low bytes mismatch, go set adr explicitly ?
         ;
         ;   Increment the address.
         ;
         movff   reg0, tadri+0 ;update local copy of the address in the target
         movff   reg1, tadri+1

         loadk8  reg0, 6     ;INCREMENT ADDRESS opcode
         gcall   sert_send6
         jump    sa183_leave
;
;   Explicitly load the target address with the desired address.  The desired
;   target address is in REG1:REG0.
;
sa183_set unbank
         movff   reg0, tadri+0 ;update local copy of the address in the target
         movff   reg1, tadri+1

         loadk8  reg0, 29    ;send LOAD PC ADDRESS command
         gcall   sert_send6
         movff   tadr+0, reg0 ;get the 22 payload bits to send
         clrf    reg2
         gcall   sert_send22ss ;send them in a 24 bit word

         setflag tadrkn      ;indicate the target address is known

sa183_leave unbank           ;common exit point
         leaverest

;*******************************************************************************
;
;   Routine F16E_READ
;
;   Read the target chip data at address TADR.  The data is returned in the low
;   bits of REG1:REG0 with unused high bits set to 0.  This routine must jump to
;   DONE_READ when done.  REG2-REG3, REG8 may be trashed.
;
         glbent  f16e_read

         mcall   set_adr     ;make sure target chip is at the desired address

         dbankif gbankadr
         movlw   b'000100'   ;get READ DATA FROM PROGRAM MEMORY command
         btfsc   flag_spdata ;really are in program memory space ?
         movlw   b'000101'   ;no, get READ DATA FROM DATA MEMORY command
         movwf   reg0
         gcall   sert_send6  ;send it

         gcall   sert_recv14ss ;get the 14 data bits into low bits of REG1,REG0

         gjump   done_read

;*******************************************************************************
;
;   Routine F16E_READ183
;
;   Read the target chip data at address TADR.  The data is returned in the low
;   bits of REG1:REG0 with unused high bits set to 0.  This routine must jump to
;   DONE_READ when done.  REG2-REG3, REG8 may be trashed.
;
;   This version is for the 16F183xx and related.  Commands used:
;
;     READ DATA FROM NVM and increment address (36)  -  Used here directly.
;
;     LOAD PC ADDRESS (29)  -  Used via SET_ADR183.
;     INCREMENT ADDRESS (6)
;
         glbent  f16e_read183

         mcall   set_adr183  ;make sure target chip is at the desired address
;
;   Do the read.
;
         loadk8  reg0, 36    ;send command to read data and increment the address
         gcall   sert_send6
         gcall   sert_recv14ss ;get the 14 data bits into low bits of REG1,REG0
;
;   Update the local copy of the target address.  The increment read and
;   increment command only increments within the existing memory address half
;   space.
;
         dbankif gbankadr
         movf    tadri+1, w  ;get starting address high byte
         andlw   h'80'       ;mask in only the bit that will stay the same
         movwf   reg2        ;save high address bit in REG2

         incf    tadri+0     ;increment the low address byte
         movlw   0
         addwfc  tadri+1, w  ;make incremented address high byte
         andlw   h'7F'       ;mask in only the bits that participate in increment
         iorwf   reg2, w     ;restore the original high bit
         movwf   tadri+1     ;set final updated high address byte

         gjump   done_read

;*******************************************************************************
;
;   Write Routines.  The selected write routine is jumped to from the dispatch
;   code in the OP module when a write operation is requested.
;
;   The data to write is in REG1:REG0, and the address to write it to in TADR.
;   This routine must jump to DONE_WRITE when done.  REG0-REG3, REG8 may be
;   trashed.  NEXTWAIT has been initialized with the TPROG value and CNTWAIT is
;   zero (no wait interval in progress).  The OPn flags have all been cleared
;   by OP_WRITE before the specific write routine is called.
;
;*****************************
;
;   Internal routine WRITE_COMM
;
;   Write the word in REG1:REG0 to the address in TADR.
;
;   This is the common write routine jumped to by the other write routines after
;   any customizing switches have been set.  The possible customizations are:
;
;     FLAG_OP1
;       0: no command to end programming, timed only
;       1: issue command to end programming after wait time
;
;     CMD_PROG  -  Start programming opcode.
;
;     CMD_END  -  End programming opcode.  Only meaningful when FLAG_OP1 set.
;
write_comm unbank
         mcall   set_adr     ;make sure target chip is at the desired address
;
;   Write the data word to the target chip.  This may will only write it to the
;   write buffer unless this is the last address in this write buffer window.
;
         movf    reg0, w     ;save original REG0 value in REG2
         movwf   reg2

         dbankif gbankadr
         movlw   2           ;get LOAD DATA FOR PROGRAM MEMORY command
         btfsc   flag_spdata ;really are in program memory space ?
         movlw   3           ;get LOAD DATA FOR DATA MEMORY command
         movwf   reg0
         gcall   sert_send6  ;send the command
         movf    reg2, w     ;restore the original data in REG0
         movwf   reg0
         gcall   sert_send14ss ;send the data word
;
;   Decide whether a write cycle must be performed now.  This section either
;   jumps to DID_WRITE if not, or falls thru or jumps to DO_WRITE if a
;   write needs to be performed now.
;
;   The write buffer size is assumed to be a power of 2.  It is set to 1 if
;   the target has no write buffer.
;
         ;
         ;   Check for data space.  Data space writes are always single words.
         ;
         dbankif gbankadr
         btfsc   flag_spdata ;in program memory space ?
         jump    do_write    ;no, data space always uses single word writes
         ;
         ;   Check for at the last offset of a write buffer footprint.
         ;   a write is always performed in that case.  Note that a
         ;   write will automatically be performed every word when the write
         ;   buffer size is 1.
         ;
         dbankif gbankadr
         decf    wbufsz, w   ;get mask for address offset into write buffer
         movwf   reg0        ;save the mask
         andwf   tadr+0, w   ;mask in the write buffer offset bits
         xorwf   reg0, w     ;compare to the mask
         skip_nz             ;no at last offset in write buffer ?
         jump    do_write    ;at last word of write buffer, do the write now
         ;
         ;   Force a write now if the address is past the last address to
         ;   which buffered writes apply.
         ;
         dbankif gbankadr
         movf    tadr+1, w   ;get high byte of this address
         subwf   wbufen+1, w ;compare to high byte of last write buffered address
         skip_wle            ;could still be within write buffer range ?
         jump    do_write    ;definitely past write buffer range
         skip_z              ;high bytes equal, need to check low bytes ?
         jump    did_write   ;definitely before end of write buffer coverage

         movf    tadr+0, w   ;get low byte of this address
         subwf   wbufen+0, w ;compare to low byte of last write buffered address
         skip_wgt            ;past end of write buffer coverage ?
         jump    did_write   ;no, don't do a write this word
;
;   Do a write cycle.
;
do_write unbank
         movff   cmd_prog, reg0 ;send command to start the programming operation
         gcall   sert_send6
         start_wait_next     ;start the wait interval for this write
         ;
         ;   Send a command to end the programming if required.
         ;
         dbankif gbankadr
         btfss   flag_op1    ;a end programming command is required ?
         jump    did_write   ;no, skip this section

         movff   cmd_end, reg0 ;get the command opcode
         wait                ;wait the required write time
         gcall   sert_send6  ;send the end programming command
         startwait endms     ;set delay required before next operation

did_write unbank             ;done performing write cycle, if any, for this word
         gjump   done_write

;*****************************
;
;   WRITE_16F182X
;
;   For the 16F182x.  We don't know where Microchip is going with this, so it
;   may apply to other enhanced 16F subfamilies in the future.
;
         glbent  write_16f182x
         ;
         ;   Set up and do regular program memory write if that is what this is.
         ;
         dbankif lbankadr
         loadk8  cmd_prog, 24 ;BEGIN EXTERNALLY TIMED PROGRAMMING
         loadk8  cmd_end, 10 ;END EXTERNALLY TIMED PROGRAMMING
         setflag op1         ;indicate end programming command required

         dbankif gbankadr
         btfsc   tadr+1, 7   ;in regular program memory region ?
         jump    cfg182x     ;no, in config region
         btfss   flag_spdata ;in data address space ?
         jump    write_comm  ;do regular program memory write
         ;
         ;   Not writing to regular program memory.
         ;
cfg182x  unbank
         setwait iprogms     ;set wait time for internally timed programming
         dbankif lbankadr
         loadk8  cmd_prog, 8 ;BEGIN INTERNALLY TIMED PROGRAMMING
         clrflag op1         ;indicate to not issue programming end command
         jump    write_comm

;*****************************
;
;   Subroutine WRITE_16F183XX
;
;   The data to write is in REG1:REG0, and the address to write it to in TADR.
;   This routine must jump to DONE_WRITE when done.  REG0-REG3, REG8 may be
;   trashed.  NEXTWAIT has been initialized with the TPROG value and CNTWAIT is
;   zero (no wait interval in progress).  The OPn flags have all been cleared
;   by OP_WRITE before the specific write routine is called.
;   For the PIC 16F183xx and related.
;
;   This version is for the 16F183xx and related.
;
;   Commands used here directly:
;
;     LOAD DATA FOR NVM (2)
;     LOAD DATA FOR NVM, increment adr (34)
;     BEGIN EXTERNALLY TIMED PROGRAMMING (24)
;     END PROGRAMMING (10)
;     BEGIN INTERNALLY TIMED PROGRAMMING (8)
;
;   Commands used implicitly via SET_ADR183.
;
;     LOAD PC ADDRESS (29)
;     INCREMENT ADDRESS (6)
;
         glbsub  write_16f183xx

         mcall   set_adr183  ;make sure the target is set to the write address

         dbankif gbankadr
         btfsc   tadri+1, 7  ;in normal program memory space ?
         jump    w183_config ;in config space
;
;   This is a normal program memory write.  These are done WBUFSZ words at a
;   time.  For all but the last address in a write block, the data is written
;   and the address incremented.  For the last address, the data is written
;   without the address being incremented, and the actual write is performed.
;
         dbankif gbankadr
         decf    wbufsz, w   ;make mask for offset into write buffer
         movwf   reg2        ;temp save it
         andwf   tadr+0, w   ;make offset into write buffer
         xorwf   reg2, w     ;compare to offset for last word
         bz      w183_prog_last ;writing last location in the write buffer
         ;
         ;   Writing to other than the last location in the write buffer.
         ;
         movff   reg0, reg2  ;temp save low byte of data
         loadk8  reg0, 34    ;opcode LOAD DATA FOR NVM, increment address
         gcall   sert_send6  ;send it
         movff   reg2, reg0  ;restore write data into REG1:REG0
         gcall   sert_send14ss ;send the data to write
         gcall   op_inc_tadri ;indicate target address was incremented
         gjump   done_write
         ;
         ;   Writing to the last word of the write buffer.
         ;
w183_prog_last dbankis gbankadr
         movff   reg0, reg2  ;temp save low byte of data
         loadk8  reg0, 2     ;opcode LOAD DATA FOR NVM (not increment adr)
         gcall   sert_send6  ;send it
         movff   reg2, reg0  ;restore write data into REG1:REG0
         gcall   sert_send14ss ;send the data to write

         loadk8  reg0, 24    ;opcode BEGIN EXTERNALLY TIMED PROGRAMMING
         gcall   sert_send6  ;start the flash write
         gcall   wait_start  ;start the wait to time the flash write
         loadk8  reg0, 10    ;opcode END PROGRAMMING
         gcall   wait_wait   ;wait for the flash write to complete
         gcall   sert_send6  ;end the flash write
         startwait 0.300     ;guarantee high voltage discharge time
         clrflag tadrkn      ;block write seems to corrupt the address
         gjump   done_write
;
;   Writing to config space.
;
w183_config dbankis gbankadr
         movff   reg0, reg2  ;temp save low byte of data
         loadk8  reg0, 2     ;opcode LOAD DATA FOR NVM, don't increment address
         gcall   sert_send6  ;send it
         movff   reg2, reg0  ;restore write data into REG1:REG0
         gcall   sert_send14ss ;send the data to write

         loadk8  reg0, 8     ;opcode BEGIN INTERNALLY TIMED PROGRAMMING
         gcall   sert_send6  ;start the write
         startwait 5.0       ;start the wait to time the write
         gjump   done_write

         end
