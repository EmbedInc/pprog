;   ***************************************************************
;   * Copyright (C) 2011, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Common include file for the PIC programmer firmware builds.  This file is
;   intended to be included at the end of each project-specific include file.
;

;*******************************************************************************
;
;   Configuration constants.
;
adrbank  equ     1           ;bank for ADR_xxx variables
;
;   Derived constants.
;
adrbankadr equ   bankadr(adrbank) ;address within ADR_xxx variables bank

;*******************************************************************************
;
;   Define flags required by the common PICPRG code.
;
/flag    24h                 ;target is a PIC 24 or 33, set on RESET command
/flag    33ep                ;target is a PIC 24 or 33 EP series, flag 24H also set
/flag    tdrive              ;target is driving the PGD (serial data) line
/flag    offvddvpp           ;Vdd lowered before Vpp on off
/flag    op1                 ;private flag used during table-selected operation
/flag    op2                 ;private flag used during table-selected operation
/flag    op3                 ;private flag used during table-selected operation
/flag    op4                 ;private flag used during table-selected operation
/flag    spdata              ;read/write data memory, not program memory space
/flag    tadrkn              ;target address is known and stored in TADRI
/flag    adrinc              ;target address has been incremented since reset
/flag    rdcache             ;cached data read from target is valid
/flag    ntohost             ;host input timeout disabled

;*******************************************************************************
;
;   Preprocessor subroutine MAKEWAIT ms
;
;   Compute the number of system ticks to wait for to guarantee the minimum wait
;   time of MS milliseconds.  The result is left in the integer preprocessor
;   variable WTICKS.  To actually perform a wait, the WTICKS value must be
;   loaded into NEXTWAIT, then WAIT_START and WAIT_WAIT called.
;
/subroutine makewait
  /var exist wticks integer  ;returned number of ticks to wait
  /var local ms real = [arg 1] ;minimum wait time in milliseconds
  /set wticks [+ [trunc [/ [* ms 1000] tickus]] 2] ;compute ticks to wait
  /endsub

;*******************************************************************************
;
;   Macro SETWAIT ms
;
;   This macro computes the minimum number of clock tick that must elapse to
;   guarantee a time of MS milliseconds has elapsed.  This value is loaded into
;   NEXTWAIT, but no wait interval is started.
;
/macro setwait
  /call makewait [arg 1]     ;make ticks to wait in WTICKS
         dbankif gbankadr
         extern  nextwait
         loadk24 nextwait, [v wticks]
  /endmac

;*******************************************************************************
;
;   Macro STARTWAIT ms
;
;   Start a wait interval that will be MS milliseconds long.  FLAG_DONE will
;   be initialized to cleared, and will automatically be set when the
;   wait interval elapses.  This macro only sets up the wait interval
;   and finishes "quickly".  The actual wait time is rounded up within the
;   available resolution to guarantee the wait time is never less than
;   MS milliseconds.
;
;   The minimum wait is for two clock ticks to occur, thereby guaranteeing a
;   wait of at least 1 clock tick period.
;
;   Processing of host commands that require operations on the target chip
;   will be suspended until the wait interval elapses.
;
/macro startwait
         setwait [arg 1]
         gcall   wait_start
  /endmac

;*******************************************************************************
;
;   Macro START_WAIT_NEXT
;
;   Start a new wait interval.  The number of ticks to wait must be
;   in the 24 bit variable NEXTWAIT.  There must not currently be a wait
;   interval in progress.  This means that on entry it is assumed that
;   FLAG_DONE is set and CNTWAIT is zero.
;
start_wait_next macro
         gcall   wait_start
         endm

;*******************************************************************************
;
;   Macro WAIT
;
;   Wait for the current wait interval to elapse.  This marco will
;   complete immediately if no wait interval is in progress, meaning
;   the previous wait has already elapsed.
;
wait     macro
         gcall   wait_wait   ;perform the wait
         endm

;*******************************************************************************
;
;   Macro WAITMS ms
;
;   Wait the indicated number of milliseconds.  The wait time will be
;   rounded to the available resolution so that the actual wait is never
;   less than the amount specified by the argument.
;
;   This macro is just a convenience wrapper around the SETWAITMS and WAIT
;   macros.
;
/macro waitms
         startwait [arg 1]
         gcall   wait_wait
  /endmac
