;   ****************************************************************
;   * Copyright (C) 2022, Embed Inc (http://www.embedinc.com).     *
;   * All rights reserved except as explicitly noted here.         *
;   *                                                              *
;   * Permission to copy this file is granted as long as this      *
;   * copyright notice is included in its entirety at the          *
;   * beginning of the file, whether the file is copied in whole   *
;   * or in part and regardless of whether other information is    *
;   * added to the copy, and one of the following conditions is    *
;   * met:                                                         *
;   *                                                              *
;   *   1 - Any executable derived from the this file is only run  *
;   *       on a Embed Inc product.                                *
;   *                                                              *
;   *   2 - Any device that contains executable code derived from  *
;   *       this file is not sold, not distributed for commercial  *
;   *       advantage, and not more than 10 (ten) instances of the *
;   *       device are created.                                    *
;   *                                                              *
;   * To copy this file otherwise requires explicit permission     *
;   * from Embed Inc and may also require a fee.                   *
;   *                                                              *
;   * The information in this file is provided "as is".  Embed Inc *
;   * makes no claims of suitability for any particular purpose    *
;   * nor assumes any liability resulting from its use.            *
;   ****************************************************************
;
;   Include file that implements the common parts of the programming algorithm
;   for target chips like the PIC 18F25Q10.  These parts use a rather different
;   programming command set than the original PIC 16 or 18.
;
;   The programming command set supported here uses 8 bit opcodes and 24 bit
;   data words.  In contrast, the original 16F and the 16F1xxx both use 6 bit
;   opcodes.
;
;   The program memory address space is partioned (addresses in HEX):
;
;     00 0000  -  1F FFFF  Program memory
;     20 0000  -  20 xxxx  User ID words
;     30 0000  -  30 000F  Configuration words
;     31 0000  -  31 xxxx  EEPROM
;     3F FFFC  -  3F FFFD  Chip revision (fixed in silicon)
;     3F FFFE  -  3F FFFF  Chip ID (fixed in silicon)
;
         extern  done_read   ;jump here when specific read routine done
         extern  done_write  ;jump here when specific write routine done

         extern  tadr        ;requested target chip address of operation
         extern  tadri       ;local copy of address in target chip
         extern  nextwait    ;length of wait to set up on call to WAIT_START
         extern  datadr      ;start adr of EEPROM mapped into program memory
         extern_flags        ;declare global flag bits EXTERN

;*******************************************************************************
;
;   Configuration constants.
;
/const   tdly    real = 1.0e-6 ;min wait after opcode, seconds

tdlyns   equ     [rnd [* tdly 1e9]] ;TDLY in ns
;
;   Programming opcodes.
;
/const   opc_adr integer = 16#80 ;set address
/const   opc_ebulk integer = 16#18 ;bulk erase
/const   opc_rdat integer = 16#FC ;get data at curr adr
/const   opc_rdat_inc integer = 16#FE ;get data at curr adr, inc adr
/const   opc_wdat integer = 16#C0 ;load data for curr adr
/const   opc_wdat_inc integer = 16#E0 ;load data for curr adr, inc adr
/const   opc_inc integer = 16#F8 ;increment address
         //
         //   Also define MPASM constants for each of the above opcodes.
         //
/loop symbols name const     ;loop over all constants
  /var local sy string       ;base symbol name
  /var local s string
  /set sy [sym name name]    ;make bare name of this symbol
  /if [< [slen sy] 5] then   ;too short to be "OPC_x" ?
    /repeat
    /endif
  /if [<> [substr 1 4 sy] "opc_"] then ;doesn't start with "OPC_" ?
    /repeat
    /endif
  /set s sy
  /call tabopcode s
  /set s [str s "equ"]
  /call taboperand s
  /set s [str s "h'" [int [chars sy] "fw 2 lz base 16 usin"] "'"]
  /write s
  /endloop

;*******************************************************************************
;
;   Local state.
;
         defram  lbankadr

cacheadr res     3           ;start address of cached data
cachedat res     1           ;high byte of pair on read, low byte on write
flg      res     1           ;local flag bits, use FLG_xxx constants
         ;
         ;   Bit numbers for the individual flags in FLG.
         ;
flg_cachrd equ   0           ;cache contains read data high byte
flg_cachwr equ   1           ;cache contains write data low byte


.f18b    code
;*******************************************************************************
;
;   Macro SENDOPC opc
;
;   Send the opcode OPC to the target.  The REGn registers are preserved.
;
sendopc  macro   opc
         pushreg reg0        ;temp save REG0 before trashing it
         loadk8  reg0, opc   ;get the opcode into REG0
         gcall   sert_send8m ;send the opcode
         popreg  reg0        ;restore the original REG0
         endm

/const   opccy   integer = 3 ;min cycles after macro since opcode sent

////////////////////////////////////////////////////////////////////////////////
//
//   Macro OPCWAIT cy
//
//   Make sure a minimum of TDLY seconds have elapsed since the end of sending
//   the last opcode.  CY is the cycles since the SENDOPC macro.
//
/macro opcwait
         waitns  tdlyns, [+ [arg 1] opccy] ;do the wait
  /endmac

;*******************************************************************************
;
;   Local subroutine SET_ADR
;
;   Set the internal target chip address to match the desired address.  The
;   desired address is in TADR and the current address internal to the target
;   chip is TADRI.
;
         locsub  set_adr, regf0 | regf1 | regf2

         movff   tadr+0, reg0 ;make local copy of address to set
         movff   tadr+1, reg1
         movff   tadr+2, reg2
         skip_flag spdata    ;in EEPROM, will do single byte reads ?
         bcf     reg0, 0     ;in program memory, will do double byte rd/wr
;
;   Check for whether the address needs to be set in the target.
;
         skip_flag tadrkn    ;the address in the target is known ?
         jump    sa_set      ;no, go set it

         dbankif gbankadr
         movf    tadri+0, w
         iorwf   tadri+1, w
         iorwf   tadri+2, w
         bz      sa_set      ;always set addres on special case of 0

         dbankif gbankadr
         movf    tadri+0, w  ;get curr adr low byte
         xorwf   reg0, w     ;compare to desired adr low byte
         bnz     sa_set      ;mismatch, go set adr ?

         movf    tadri+1, w  ;get curr adr high byte
         xorwf   reg1, w     ;compare to desired adr high byte
         bnz     sa_set      ;mismatch, go set adr ?

         movf    tadri+2, w  ;get curr adr upper byte
         xorwf   reg2, w     ;compare to desired adr upper byte
         bz      sa_leave    ;address already set as desired, nothing to do ?
;
;   Explicitly set the address in the target chip.
;
sa_set   unbank
         wait                ;wait for any previous operation to complete
         sendopc opc_adr     ;SET ADDRESS opcode
         ;
         ;   Update local copy of target address.
         ;
         movff   reg0, tadri+0
         movff   reg1, tadri+1
         movff   reg2, tadri+2
         ;
         ;   Add DATADR to the address to send if in data (EEPROM) space, not
         ;   program memory space.  EEPROM contents is mapped to EEADR in the
         ;   program memory address space.
         ;
         skip_flag spdata    ;in data (EEPROM) space ?
         jump    sa_dspdat   ;no, skip this section

         dbankif gbankadr
         movf    datadr+0, w ;add offset for EEPROM in prog mem adr space
         addwf   reg0
         movf    datadr+1, w
         addwfc  reg1
         movf    datadr+2, w
         addwfc  reg2
sa_dspdat unbank             ;done handling in data space
         ;
         ;   Send the 22 bit address in the 24-bit data word.  The opcode to set
         ;   the PC has already been sent.  The data to send is the 22 bit
         ;   address in REG2:REG1:REG0.  This must be shifted left one bit to be
         ;   sent as the 24 bit data word for the opcode.
         ;
         bcf     status, c   ;set bit to shift in to 0
         rlcf    reg0        ;shift 22 bit address left one bit
         rlcf    reg1
         rlcf    reg2
         opcwait 16          ;guarantee minimum wait after opcode
         gcall   sert_send24m ;send the 24 data bits after the opcode

         setflag tadrkn      ;the address in the target is now known

         waitns  tdlyns, 8   ;guarantee min wait after sending address

sa_leave unbank
         leaverest

;*******************************************************************************
;
;   Routine F18B_READ
;
;   Read the target chip data at address TADR.  The data is returned in the low
;   bits of REG1:REG0 with unused high bits set to 0.  This routine must jump to
;   DONE_READ when done.
;
;   Allowed to trash REG2-REG3, REG8.
;
         glbent  f18b_read
;
;   Return data from the cache if all the conditions are valid.  The conditions
;   are:
;
;     - Reading program memory, not data memory.  Data memory is physically read
;       one byte at a time anyway.
;
;     - The high byte of a pair is being requested.  This means the address is
;       odd.
;
;     - The target address must be known.  We don't really need to know the
;       address in the target, but this flag is cleared by external actions that
;       can also make the cached data invalid.
;
;     - The cache must contain valid read data.
;
;     - The desired address must match the cache address, except the low bit.
;       This means the desired address must be one of the two addresses of the
;       data stored in the cache.
;
         dbankif gbankadr
         skip_nflag spdata   ;reading program memory, not data memory ?
         jump    rd_ncache
         btfss   tadr+0, 0   ;reading at odd address ?
         jump    rd_ncache
         skip_flag tadrkn    ;our local copy of the target address is valid ?
         jump    rd_ncache

         dbankif lbankadr
         btfss   flg, flg_cachrd ;there is read data in the cache ?
         jump    rd_ncache

         movff   tadr+0, wreg ;check cache address low byte
         xorwf   cachedat+0, w
         andlw   h'FE'       ;low address bit is irrelevant
         bnz     rd_ncache

         movff   tadr+1, wreg ;check cache address high byte
         xorwf   cachedat+1, w
         bnz     rd_ncache

         movff   tadr+2, wreg ;check cache address upper byte
         xorwf   cachedat+2, w
         bnz     rd_ncache
         ;
         ;   The cache contains the requested byte.
         ;
         movff   cachedat, reg0 ;return the byte from the cache
         clrf    reg1        ;return unused bits 0
         gjump   done_read

rd_ncache unbank             ;can't use cache
;
;   The cache can not be used, do an actual read.
;
         mcall   set_adr     ;make sure target chip is at the desired address

         wait                ;wait for any previous operation to complete
         sendopc opc_rdat_inc ;read at curr address, increment address
         opcwait 2           ;guarantee min wait after opcode
         gcall   sert_recv24m ;get the raw data word into REG2:REG1:REG0

         skip_nflag spdata   ;in program memory address space ?
         jump    rd_spdata   ;no, in data (EEPROM) address space
;
;   Reading program memory.  The data is 16 bits wide, and the target address was
;   advanced by 2.  The raw 24 bit data is in REG2:REG1:REG0.
;
         ;
         ;   Extract the 16 bit data value into REG1:REG0 and save the high byte
         ;   in the cache.
         ;
         dbankif lbankadr
         rrcf    reg2        ;position 16 bit word into REG1:REG0
         rrcf    reg1
         rrcf    reg0

         movff   reg1, cachedat ;save high byte as the cache data

         clrf    flg         ;indicate cache contains read data
         bsf     flg, flg_cachrd

         movff   tadri+0, cacheadr+0 ;set address of cached word
         movff   tadri+1, cacheadr+1
         movff   tadri+2, cacheadr+2
         ;
         ;   Update local copy of target address.  The read command incremented
         ;   the target address by 2.
         ;
         dbankif gbankadr
         movlw   2           ;update local copy of address in target
         addwf   tadri+0
         movlw   0
         addwfc  tadri+1
         addwfc  tadri+2

         dbankif gbankadr
         btfsc   tadr+0, 0   ;reading low byte of pair ?
         jump    rd_progh    ;no, go return the high byte
         ;
         ;   Return the low byte.
         ;
         clrf    reg1        ;return unused bits 0
         gjump   done_read
         ;
         ;   Return the high byte.
         ;
rd_progh unbank
         movff   reg1, reg0  ;move the high byte into position
         clrf    reg1        ;return unused bits 0
         gjump   done_read
;
;   Reading data memory.  The data is 8 bits wide, and the target address was
;   advanced by 1.
;
rd_spdata dbankis gbankadr
         rrcf    reg1        ;get the 8 bit data value into REG0
         rrcf    reg0
         clrf    reg1        ;return unused bits 0

         dbankif gbankadr
         incf    tadri+0     ;update local copy of address in target
         movlw   0
         addwfc  tadri+1
         addwfc  tadri+2

         dbankif lbankadr
         clrf    flg         ;invalidate the cache

         gjump   done_read

;*******************************************************************************
;
;   Routine F18B_WRITE
;
;   Write the word in REG1:REG0 to the address in TADR.
;
;   NEXTWAIT has been initialized with the TPROG value.  The OPn flags have all
;   been cleared by OP_WRITE before the specific write routine is called.
;
;   This routine must jump to DONE_WRITE when done.
;
;   Allowed to trash REG0-REG3, REG8.
;
;   In this implementation, the data word is always 8 bits wide.  The data byte
;   is therefore in REG0.  REG1 should be 0, but is ignored anyway.
;
         glbent  f18b_write

         skip_nflag spdata   ;writing to program memory ?
         jump    wr_spdata   ;no, writing to data memory

;*******************
;
;   Writing to program memory.
;
;   Program memory is written to 16 bits at a time.  The write is performed to
;   the even (low) address, and the address is then incremented by 2.
;
;   Check for saving the data in the cache instead of writing it.  Bytes for
;   even addresses are saved in the cache.
;
         dbankif gbankadr
         btfsc   tadr+0, 0   ;writing to byte at even address ?
         jump    wr_ncache
         ;
         ;   Save this byte in the cache and return.
         ;
         movff   reg0, cachedat ;save the data byte
         movff   tadr+0, cacheadr+0 ;save the address
         movff   tadr+1, cacheadr+1
         movff   tadr+2, cacheadr+2
         dbankif lbankadr
         clrf    flg         ;indicate cache contains a write byte
         bsf     flg, flg_cachwr

         gjump   done_write

wr_ncache unbank             ;don't just save data in the cache
;
;   This byte is for the upper (odd) address of a pair.  The whole pair will be
;   written.  The low byte will be taken from the cache, if available.  If not
;   available, FFh is substituted.  Writing FFh preserves the origina byte
;   value.
;
         mcall   set_adr     ;make sure target chip is at the desired address
;
;   Send programming command opcode to do the write.
;
         wait                ;wait for any previous operation to complete
         sendopc opc_wdat_inc ;opcode for write to curr address, increment address
;
;   Assemble the 16 bits to write in REG1:REG0.  The current data byte in REG0
;   is actually the high byte.  The low byte comes from the cache, or FFh if the
;   cache is invalid.
;
         movff   reg0, reg1  ;get high byte into place
         setf    reg0        ;init low byte to cache data not available
         ;
         ;   Get the cache data byte into REG0 if the cache is valid for this
         ;   byte.
         ;
         dbankif lbankadr
         btfss   flg, flg_cachwr ;the cache contains a write byte ?
         jump    wr_ncachv

         movff   tadr+0, reg2 ;check address low byte
         movf    cacheadr+0, w
         xorwf   reg2, w
         andlw   h'FE'       ;ignore low bit mismatch
         bnz     wr_ncachv

         movff   tadr+1, reg2 ;check address high byte
         movf    cacheadr+1, w
         xorwf   reg2, w
         bnz     wr_ncachv

         movff   tadr+2, reg2 ;check address upper byte
         movf    cacheadr+2, w
         xorwf   reg2, w
         bnz     wr_ncachv
         ;
         ;   The cache data is valid.
         ;
         movff   cachedat, reg0 ;get low byte value from the cache

wr_ncachv unbank             ;skip here on cache data not valid
;
;   Increment our local copy of the target address by 2 to match what the write
;   command did.
;
         dbankif gbankadr
         movlw   2           ;get the increment amount
         addwf   tadri+0     ;do the increment
         movlw   0
         addwfc  tadri+1
         addwfc  tadri+2
;
;   Write the data in REG1:REG0.  The programming command opcode has already
;   been sent.
;
         clrf    reg2        ;extend the 16 bit write data into REG2:REG1:REG0
         bcf     status, c   ;cause 0 bit to be shifted in
         rlcf    reg0        ;shift left 1 bit to make 24 bit data word
         rlcf    reg1
         rlcf    reg2

         opcwait 19          ;guarantee min wait after opcode
         gcall   sert_send24m ;send the 24 bits in REG2:REG1:REG0
         start_wait_next     ;start the wait for the write to complete

         gjump   done_write  ;all done with write to program memory

;*******************
;
;   Writing to data memory.
;
;   Data memory is written one byte at a time.
;
wr_spdata unbank
         mcall   set_adr     ;make sure target chip is at the desired address

         wait                ;wait for any previous operation to complete
         sendopc opc_wdat_inc ;opcode for write to curr address, increment address
;
;   Increment our local copy of the target address by 1 to match what the write
;   command did.
;
         dbankif gbankadr
         incf    tadri+0     ;increment the low byte
         movlw   0
         addwfc  tadri+1     ;propagate carry to higher bytes
         addwfc  tadri+2
;
;   Write the data in REG0.  The programming command opcode has already been
;   sent.
;
         clrf    reg1        ;expand write data into REG2:REG1:REG0
         clrf    reg2

         bcf     status, c   ;cause 0 bit to be shifted in
         rlcf    reg0        ;shift left 1 bit to make 24 bit data word
         rlcf    reg1
         rlcf    reg2

         opcwait 13          ;guarantee min wait after opcode
         gcall   sert_send24m ;send the 24 bits in REG2:REG1:REG0
         start_wait_next     ;start the wait for the write to complete

         gjump   done_write  ;all done with write to data memory
